# Based on https://github.com/prettier/prettier/blob/master/.github/workflows/dev-test.yml
name: Dev

on:
  workflow_dispatch:
    inputs:
      randomlyseed:
        description: 'Pytest Randomly Seed'
        required: false
        default: ''
  schedule:
    - cron: '0 5 * * *'
  push:
    branches:
      - main
      - development
  pull_request:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-18.04"
          - "windows-2019"
        python-version:
          - 3.7
          - 3.8
        node-version:
          - 12
          - 14
        include:
          # only enable coverage on the fastest job
          - os: "ubuntu-18.04"
            python-version: "3.7"
            node-version: "12"
            ENABLE_CODE_COVERAGE: true
            IS_FASTEST_JOB: true
          - os: "ubuntu-18.04"
            IS_LINUX: true
          - os: "windows-2019"
            IS_WINDOWS: true
    env:
      ENABLE_CODE_COVERAGE: ${{ matrix.ENABLE_CODE_COVERAGE }}
      JOB_PYTHON_VERSION: ${{ matrix.python-version }}
    name: Python ${{ matrix.python-version }} with Node ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node }}
      - name: Display Language Dependency Versions
        run: |
          python --version
          pip --version
          node --version
          npm --version

      - name: Cache node modules (Linux/Mac) # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v2
        if: matrix.IS_LINUX == true
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ matrix.os }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-
            ${{ matrix.os }}-${{ matrix.node-version }}-build-
            ${{ matrix.os }}-${{ matrix.node-version }}-

      - name: Cache Python modules
        uses: actions/cache@v2
        env:
          cache-name: cache-python-modules
        with:
          path: ./pipenv_cache
          key: ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-
            ${{ matrix.os }}-${{ matrix.python-version }}-build-
            ${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Display Chrome version (Windows)
        if: matrix.IS_WINDOWS == true
        run: (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe').'(Default)').VersionInfo

      - name: Display Chrome version (Linux)
        if: matrix.IS_LINUX == true
        run: |
          google-chrome --version
          chromedriver --version

      - name: Install pipenv # no known reason for this specific version of pipenv, just pinning it for good practice
        run: pip install pipenv==2020.8.13

      - name: Install Dependencies
        env:
          PIPENV_VENV_IN_PROJECT: 1
          PIPENV_CACHE_DIR: ./pipenv_cache
        run: |
          pipenv --three
          pipenv shell
          pip freeze
          pipenv install --dev --deploy

      - name: Log full installed packages
        run: pip freeze

      - name: Run pre-commit hooks
        if: matrix.IS_FASTEST_JOB == true
        # only enable pre-commit on the fastest job. When pipenv runs an install, even using --deploy, it makes tweaks...somehow...to the Pipfile
        run: |
          pre-commit install
          SKIP=git-dirty pre-commit run -a

      - name: Move OpalKelly .so file to needed location (Linux)
        if: matrix.IS_LINUX == true # Eli (10/20/20): not sure if copying to both locations is needed...but it's working and haven't checked which is required...should theoretically only be one needed
        run: |
          sudo cp .venv/lib/python${{ matrix.python-version }}/site-packages/xem_wrapper/_linux/libokFrontPanel.so /usr/local/lib
          sudo cp .venv/lib/python${{ matrix.python-version }}/site-packages/xem_wrapper/_linux/libokFrontPanel.so /usr/lib

      # - name: Download the firmware files from AWS S3
      #   run: python run_s3_download.py


      - name: Run Tests with randomly generated seed
        if: github.event.inputs.randomlyseed == ''
        run: pytest -xsvv --cov-report=xml --include-slow-tests # --full-ci

      - name: Run Tests with supplied pytest-randomly seed
        if: github.event.inputs.randomlyseed != ''
        run: pytest -xsvv --cov-report=xml --randomly-seed=${{ github.event.inputs.randomlyseed }} --include-slow-tests # --full-ci

      - name: Confirm Sphinx Docs build correctly
        # only check Sphinx docs build on the fastest job
        if: matrix.IS_FASTEST_JOB == true
        run: SPHINXOPTS="-W" make --directory=docs html # the -W flag treats warnings as errors to cause build failures

      - name: Upload coverage to Codecov
        # only upload coverage from fastest job
        if: matrix.IS_FASTEST_JOB == true
        uses: codecov/codecov-action@v1
        timeout-minutes: 1   # Tanner (8/11/20): once fundmental issue with codecov timeout is fixed, remove this line and the next
        continue-on-error: true
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
