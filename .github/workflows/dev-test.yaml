# Based on https://github.com/prettier/prettier/blob/master/.github/workflows/dev-test.yml
name: Dev

on:
  workflow_dispatch:
    inputs:
      randomlyseed:
        description: "Pytest Randomly Seed"
        required: false
        default: ""
  schedule:
    - cron: "0 5 * * *"
  push:
    branches:
      - main
      - development
  pull_request:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-18.04"
          - "windows-2019"
        python-version:
          - 3.7
          #- 3.8
        node-version:
          - 12
          #- 14
        include:
          # only enable coverage on the fastest job
          - os: "ubuntu-18.04"
            python-version: "3.7"
            node-version: "12"
            IS_FASTEST_JOB: true

    name: Python ${{ matrix.python-version }} with Node ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node }}
      - name: Display Language Dependency Versions
        run: |
          python --version
          pip --version
          node --version
          npm --version

      - name: Cache node modules # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ./.npm_cache
          key: ${{ matrix.os }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-

      - name: Cache Python modules
        uses: actions/cache@v2
        env:
          cache-name: cache-python-modules
        with:
          path: ./.pipenv_cache
          key: ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-

      - name: Cache Pre-commit hooks
        uses: actions/cache@v2
        env:
          cache-name: cache-pre-commit-hooks
        if: matrix.IS_FASTEST_JOB == true
        with:
          path: ./.precommit_cache
          key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-

      - name: Display Chrome version (Windows)
        if: runner.os == 'Windows'
        run: (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe').'(Default)').VersionInfo

      - name: Display Chrome version (Linux)
        if: runner.os == 'Linux'
        run: |
          google-chrome --version
          chromedriver --version

      - name: Install pipenv # no known reason for this specific version of pipenv, just pinning it for good practice
        run: pip install pipenv==2020.8.13
      # - name: Display Python version
      #   run: |
      #     python -c "import sys; print(sys.version)"
      #     python -m venv venv
      # - name: Activate virtual environment (Linux/MacOS)
      #   if: runner.os == 'Linux'
      #   run: . venv/bin/activate
      # - name: Activate virtual environment (Windows)
      #   if: runner.os == 'Windows'
      #   run: venv\Scripts\Activate.ps1
      - name: Install Python Dependencies
        env:
          PIPENV_VENV_IN_PROJECT: 1
          PIPENV_CACHE_DIR: ./.pipenv_cache
        run: |
          pipenv --three
          pipenv run pip freeze
          pipenv install --dev --deploy
          pipenv run pip install -e .
        # run: |
        #   pip install -r requirements-dev.txt
        #   pip install -r requirements.txt
        #   pip install -e .

      - name: Log full installed Python packages
        run: pipenv run pip freeze
        # run: pip freeze

      - name: Install NPM Dependencies
        run: pipenv run npm ci --cache .npm_cache/

      - name: Run pre-commit hooks
        if: matrix.IS_FASTEST_JOB == true
        env:
          PRE_COMMIT_HOME: ./.precommit_cache

        # only enable pre-commit on the fastest job. When pipenv runs an install, even using --deploy, it makes tweaks...somehow...to the Pipfile
        run: |
          pipenv run pre-commit install
          pipenv run pre-commit run -a
        # run: |
        #   pre-commit install
        #   pre-commit run -a

      - name: Move OpalKelly .so file to needed location (Linux)
        if: runner.os == 'Linux' # Eli (10/20/20): not sure if copying to both locations is needed...but it's working and haven't checked which is required...should theoretically only be one needed
        run: |
          sudo cp .venv/lib/python${{ matrix.python-version }}/site-packages/xem_wrapper/_linux/libokFrontPanel.so /usr/local/lib
          sudo cp .venv/lib/python${{ matrix.python-version }}/site-packages/xem_wrapper/_linux/libokFrontPanel.so /usr/lib
        # run: |
        #   sudo cp venv/lib/python${{ matrix.python-version }}/site-packages/xem_wrapper/_linux/libokFrontPanel.so /usr/local/lib
        #   sudo cp venv/lib/python${{ matrix.python-version }}/site-packages/xem_wrapper/_linux/libokFrontPanel.so /usr/lib

      - name: Download the firmware files from AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_IAM_USER_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_IAM_USER_SECRET_KEY }}
        run: pipenv run python run_s3_download.py
        # run: python run_s3_download.py

      # - name: Run Python Tests with randomly generated seed
      #   if: github.event.inputs.randomlyseed == ''
      #   run: pipenv run pytest -xsvv --cov-report=xml --include-slow-tests # --full-ci
      #   # run: pytest -xsvv --cov-report=xml --include-slow-tests # --full-ci

      # - name: Run Python Tests with supplied pytest-randomly seed
      #   if: github.event.inputs.randomlyseed != ''
      #   run: pipenv run pytest -xsvv --cov-report=xml --randomly-seed=${{ github.event.inputs.randomlyseed }} --include-slow-tests # --full-ci
      #   # run: pytest -xsvv --cov-report=xml --randomly-seed=${{ github.event.inputs.randomlyseed }} --include-slow-tests # --full-ci

      # - name: Confirm Sphinx Docs build correctly
      #   # only check Sphinx docs build on the fastest job
      #   if: matrix.IS_FASTEST_JOB == true
      #   run: pipenv run SPHINXOPTS="-W" make --directory=docs html # the -W flag treats warnings as errors to cause build failures

      - name: Run Jest Tests
        # run: pipenv run npm run test:unit -- --ci
        run: npm run test:unit -- --ci

      - name: Insert the Build Number into the code (Windows)
        if: runner.os == 'Windows'
        run: |
          echo $GITHUB_RUN_NUMBER
          ((Get-Content -path src\mantarray_desktop_app\constants.py -Raw) -replace 'REPLACETHISWITHTIMESTAMPDURINGBUILD',"$(Get-Date -Format 'yyMMddHHmmss')--$GITHUB_RUN_NUMBER") | Set-Content -Path src\mantarray_desktop_app\constants.py

      - name: Install Pyinstaller (Windows) # Eli (10/21/20): when installed with pipenv during development on Linux, not all the right dependencies are included. Maybe there's a better way to get it into the pipfile, but unsure right now
        if: runner.os == 'Windows'
        run: |
          pipenv run pip install pyinstaller==4.0.0
          pipenv run pip freeze

      - name: Compile the Python Executable (Windows)
        if: runner.os == 'Windows'
        run: pipenv run pyinstaller pyinstaller.spec --log-level=DEBUG --distpath=dist-python --workpath=build-python
        # run: pyinstaller pyinstaller.spec --log-level=DEBUG --distpath=dist-python --workpath=build-python

      - name: Run Python Tests on Executable with randomly generated seed (Windows)
        if: runner.os == 'Windows' && github.event.inputs.randomlyseed == ''
        run: pipenv run pytest tests/test_exe.py -xsvv --only-exe --no-cov

      - name: Run Python Tests on Executable with supplied pytest-randomly seed (Windows)
        if: runner.os == 'Windows' && github.event.inputs.randomlyseed != ''
        run: pipenv run pytest tests/test_exe.py -xsvv --only-exe --no-cov --randomly-seed=${{ github.event.inputs.randomlyseed }}

      - name: Build Full Electron App
        run: pipenv run npm run build
        # run: npm run test:unit -- --ci

      - name: Upload coverage to Codecov
        # only upload coverage from fastest job
        if: matrix.IS_FASTEST_JOB == true
        uses: codecov/codecov-action@v1
        timeout-minutes: 1 # Tanner (8/11/20): once fundmental issue with codecov timeout is fixed, remove this line and the next
        continue-on-error: true
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true

      # - name: Archive visual regression
      #   if: ${{ failure() }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: visual-regression-screenshots--${{ matrix.os }}--${{ matrix.node }}
      #     path: "tests/e2e/screenshots/**/*"

      - name: Archive Installer File
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: installer--${{ matrix.os }}--${{ matrix.node-version }}--${{ matrix.python-version }}
          path: "dist/Mantarray*.exe"

      - name: Archive Dist Folder
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: dist--${{ matrix.os }}--${{ matrix.node-version }}--${{ matrix.python-version }}
          path: "dist/**/*"
