# Based on https://github.com/prettier/prettier/blob/master/.github/workflows/dev-test.yml
name: Release and Publish to s3

# TODO (Eli 12/11/20): try and create a separate job for testing the exe that just transfers over the artifacts...somehow...will be hard since exe tests import things from the installed python package...but there were errors where it seemed like it ran in GitHub but then downloading and running locally it couldn't find the Cython imports when opening the EXE

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag"
        required: true
        default: ""
      release_channel:
        description: "Release channel"
        required: true
        default: "alpha"
      randomlyseed:
        description: "Pytest Randomly Seed"
        required: false
        default: ""
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - "windows-2019"
        python-version:
          - 3.8
          # - 3.9 # Eli (12/10/20): Cython package is giving issues with Python 3.9 currently
        node-version:
          - 14
        include:
          - os: "windows-2019"
            python-version: "3.8"
            node-version: "14"
            IS_DEPLOYMENT_CONFIG: true

    name: Python ${{ matrix.python-version }} with Node ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Adjust Screen Resolution (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-DisplayResolution
          Set-DisplayResolution -Width 1920 -Height 1080 -Force
          Get-DisplayResolution

      - name: Checkout
        uses: actions/checkout@v2

      - name: Check release tag
        id: check-tag
        run: |
          git fetch --tags
          echo "::set-output name=TAG::$(git tag -l ${{ github.event.inputs.release_tag }})"

      - name: Init git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Create release tag
        if: steps.check-tag.outputs.TAG == ''
        run: |
          git tag -a ${{github.event.inputs.release_tag}} -m "release ${{ github.event.inputs.release_tag }}"
          git push origin ${{github.event.inputs.release_tag}}

      - name: Checkout tag
        run: |
          git fetch --tags
          git checkout tags/${{github.event.inputs.release_tag}}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v2.4.0
        with:
          node-version: ${{ matrix.node }}
      - name: Display Language Dependency Versions
        run: |
          python --version
          pip --version
          node --version
          npm --version

      - name: Cache node modules # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v2.1.6
        env:
          cache-name: cache-node-modules
        with:
          path: ./.npm_cache
          key: ${{ matrix.os }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-

      - name: Cache Python modules
        uses: actions/cache@v2.1.6
        env:
          cache-name: cache-python-modules
        with:
          path: ./.pipenv_cache
          key: ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-

      - name: Display Chrome version (Windows)
        if: runner.os == 'Windows'
        run: (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe').'(Default)').VersionInfo

      - name: Get Version
        id: software-version
        uses: notiz-dev/github-action-json-property@v0.1.0
        with:
          path: "package.json"
          prop_path: "version"

      - name: Get Product Name
        id: product-name
        uses: notiz-dev/github-action-json-property@v0.1.0
        with:
          path: "package.json"
          prop_path: "name"

      - name: Display Extracted Software Version and Product Name
        run: |
          echo ${{steps.software-version.outputs.prop}}
          echo ${{steps.product-name.outputs.prop}}

      - name: Install pipenv # no known reason for this specific version of pipenv, just pinning it for good practice
        run: pip install pipenv==2020.11.15

      - name: Setup Pipenv
        env:
          PIPENV_VENV_IN_PROJECT: 1
        # Eli (10/28/20): in the windows environments, just saying `pipenv --three` defaults to the highest installed version of Python on the image...not the actual one specified in the matrix. So need to specify
        run: |
          pipenv --python ${{ matrix.python-version }}
          pipenv run pip freeze

      - name: Install Python Dependencies
        env:
          PIPENV_CACHE_DIR: ./.pipenv_cache
        # Eli (10/28/20): The --sequential flag was found to be necessary on windows due to issues where scipy wouldn't recognize that it had been installed. Also, when this was part of a set of multiple run commands using the pipe, when it errored it didn't cause the whole step to fail, so separating it out into its own step
        run: pipenv install --dev --deploy --sequential

      - name: Download zlib Library
        run: pipenv run python .github/workflows/run_zlib_download.py

      - name: Install Local Package in editable mode for testing
        run: pipenv run pip install -e .

      - name: Log full installed Python packages
        run: pipenv run pip freeze

      - name: Install NPM Dependencies
        run: pipenv run npm ci --cache .npm_cache/

      - name: Download the firmware files from AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_IAM_USER_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_IAM_USER_SECRET_KEY }}
        run: pipenv run python .github/workflows/run_s3_download.py

      - name: Download the VCN Notarizer and Login
        if: matrix.IS_DEPLOYMENT_CONFIG == true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_IAM_USER_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_IAM_USER_SECRET_KEY }}
        run: |
          pipenv run python .github/workflows/vcn.py download
          .\vcn --version
          pipenv run python .github/workflows/vcn.py login

      - name: Run Python Tests with randomly generated seed
        if: github.event.inputs.randomlyseed == ''
        timeout-minutes: 40
        run: pipenv run pytest -xsvv --cov-report=xml --include-slow-tests --full-ci

      - name: Run Python Tests with supplied pytest-randomly seed
        if: github.event.inputs.randomlyseed != ''
        timeout-minutes: 40
        run: pipenv run pytest -xsvv --cov-report=xml --include-slow-tests --full-ci --randomly-seed=${{ github.event.inputs.randomlyseed }}

      - name: Run Jest Tests
        run: npm run test:unit -- --ci

      - name: Insert the Build Number and Software Version into the code (Windows)
        if: runner.os == 'Windows'
        env:
          build_number: ${{ github.run_number }}
        run: |
          echo $env:build_number
          ((Get-Content -path src\mantarray_desktop_app\constants.py -Raw) -replace 'REPLACETHISWITHTIMESTAMPDURINGBUILD',"$(Get-Date -Format 'yyMMddHHmmss')--$env:build_number") | Set-Content -Path src\mantarray_desktop_app\constants.py
          ((Get-Content -path src\mantarray_desktop_app\constants.py -Raw) -replace 'REPLACETHISWITHVERSIONDURINGBUILD',"${{steps.software-version.outputs.prop}}") | Set-Content -Path src\mantarray_desktop_app\constants.py

      - name: Compile the Python Executable
        run: pipenv run pyinstaller pyinstaller.spec --log-level=DEBUG --distpath=dist-python --workpath=build-python

      - name: Run Python Tests on Executable with randomly generated seed
        if: github.event.inputs.randomlyseed == ''
        run: pipenv run pytest tests/test_exe.py -xsvv --only-exe --no-cov

      - name: Run Python Tests on Executable with supplied pytest-randomly seed
        if: github.event.inputs.randomlyseed != ''
        run: pipenv run pytest tests/test_exe.py -xsvv --only-exe --no-cov --randomly-seed=${{ github.event.inputs.randomlyseed }}

      - name: Digitally Signing the EXE bundled by pyinstaller before it gets packaged into the built Electron app
        if: matrix.IS_DEPLOYMENT_CONFIG == true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_IAM_USER_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_IAM_USER_SECRET_KEY }}
        run: |
          pipenv run python .github/workflows/vcn.py notarize "dist-python/mantarray-flask/mantarray-flask.exe"
          pipenv run python .github/workflows/vcn.py authenticate "dist-python/mantarray-flask/mantarray-flask.exe"

      - name: Build Full Electron App
        run: pipenv run npm run build-${{github.event.inputs.release_channel}}

      - name: Digitally Signing the installation and win_unpacked EXE files
        if: matrix.IS_DEPLOYMENT_CONFIG == true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_IAM_USER_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_IAM_USER_SECRET_KEY }}
        run: |
          pipenv run python .github/workflows/vcn.py notarize "dist/${{steps.product-name.outputs.prop}}-Setup-${{steps.software-version.outputs.prop}}.exe"
          pipenv run python .github/workflows/vcn.py notarize "dist/win-unpacked/Mantarray Controller.exe"
          pipenv run python .github/workflows/vcn.py authenticate "dist/${{steps.product-name.outputs.prop}}-Setup-${{steps.software-version.outputs.prop}}.exe"
          pipenv run python .github/workflows/vcn.py authenticate "dist/win-unpacked/Mantarray Controller.exe"

      - name: S3 Publisher
        if: matrix.IS_DEPLOYMENT_CONFIG == true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_IAM_GIT_PUBLISH_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_IAM_GIT_PUBLISH_SECRET_KEY }}
        run: pipenv run node s3_publish.js --file="${{steps.product-name.outputs.prop}}-Setup-${{github.event.inputs.release_channel}}-${{steps.software-version.outputs.prop}}.exe" --buildDir=./dist/ --channel=${{github.event.inputs.release_channel}}
